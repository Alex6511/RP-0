////////////////////////////
CONTRACT_TYPE
{
	name = HSFOrbitalLEO1Repeatable
	group = HumanContracts
	
	title = Human Orbital (1/LEO)
	
	description = Launch a crewed single-person spacecraft into orbit for a routine mission (must orbit for @/DurationText hours) and return safely home.

	synopsis = Fly a single-person LEO Orbital mission.
	
	completedMessage = Crew alive and well after the mission--congratulations!
	
	cancellable = true
	declinable = true
	deadline = 720 // 6 months *4
	
	prestige = Trivial
	
	targetBody = HomeWorld()
	
	maxSimultaneous = 1
	
	// reward block
	advanceFunds = 10000 * (1 + (@DurationText / 10))
	rewardReputation = 10.0 * (1 + (@DurationText / 10))
	rewardFunds = 10000 * (1 + (@DurationText / 10))
	failureReputation = 100.0 * (1 + (@DurationText / 10))
	failureFunds = @advanceFunds * 1.5
	
	
	REQUIREMENT
	{
		name = CompleteContractHSFOrbit
		type = CompleteContract
		contractType = first_OrbitCrewed
	}
	REQUIREMENT
	{
		name = CompleteContractHSFOrbit
		type = CompleteContract
		contractType = HSFOrbitalLEO2Repeatable
		invertRequirement = true
	}
	DATA
	{
		type = Duration
		unrounded = Random(6h, 24h)
		precision = 1h
	}
	DATA
	{
		type = double
		roundedDouble = Round(@unrounded, @precision)
	}
	DATA
	{
		type = Duration
		rounded = @roundedDouble
	}
	DATA
	{
		type = int
		DurationText = @roundedDouble / 3600
	}
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Crewed Orbital
		define = orbitalCrewedSpacecraft
	
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = 150000
			maxApA = 400000 + Round(Random(-100000, 200000), 1000)
			targetBody = HomeWorld()
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = @/rounded
			preWaitText = Reach specified orbit.
			waitingText = Orbiting...
			completionText = Orbits completed, you may fire retros when ready.
		}

		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			completeInSequence = true
		}
	}
}
